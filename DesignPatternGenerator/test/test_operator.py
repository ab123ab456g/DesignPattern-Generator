import unittest

from ..modules import Operator

class Test_operator(unittest.TestCase):
    def test_Operator(self):
        O = Operator.Operator()
        self.assertEqual(O.str1,'')
        self.assertEqual(O.operator,'')
        self.assertEqual(O.str2,'')
        O = Operator.Add()
        self.assertEqual(O.operator,'+')
        self.assertEqual(O.str2,'')
        self.assertEqual(O.str1,'')
        O = Operator.Sub()
        self.assertEqual(O.operator,'-')
        self.assertEqual(O.str2,'')
        self.assertEqual(O.str1,'')
        O = Operator.Multi()
        self.assertEqual(O.operator,'*')
        self.assertEqual(O.str2,'')
        self.assertEqual(O.str1,'')
        O = Operator.Divi()
        self.assertEqual(O.operator,'/')
        self.assertEqual(O.str2,'')
        self.assertEqual(O.str1,'')
        O = Operator.Remainder()
        self.assertEqual(O.operator,'%')
        self.assertEqual(O.str2,'')
        self.assertEqual(O.str1,'')
        O = Operator.DiviOnlyInteger()
        self.assertEqual(O.operator,'//')
        self.assertEqual(O.str2,'')
        self.assertEqual(O.str1,'')
        O = Operator.Power()
        self.assertEqual(O.operator,'**')
        self.assertEqual(O.str2,'')
        self.assertEqual(O.str1,'')
        O = Operator.And()
        self.assertEqual(O.operator,'and')
        self.assertEqual(O.str2,'')
        self.assertEqual(O.str1,'')
        O = Operator.Or()
        self.assertEqual(O.operator,'or')
        self.assertEqual(O.str2,'')
        self.assertEqual(O.str1,'')
        O = Operator.Is()
        self.assertEqual(O.operator,'is')
        self.assertEqual(O.str2,'')
        self.assertEqual(O.str1,'')        
        O = Operator.Not()
        self.assertEqual(O.operator,'not')
        self.assertEqual(O.str2,'')
        self.assertEqual(O.str1,'')
        O = Operator.Is_Not()
        self.assertEqual(O.operator,'is not')
        self.assertEqual(O.str2,'')
        self.assertEqual(O.str1,'')
        O = Operator.In()
        self.assertEqual(O.operator,'in')
        self.assertEqual(O.str2,'')
        self.assertEqual(O.str1,'')
        O = Operator.Eq()
        self.assertEqual(O.operator,'==')
        self.assertEqual(O.str2,'')
        self.assertEqual(O.str1,'')
        O = Operator.NEq()
        self.assertEqual(O.operator,'!=')
        self.assertEqual(O.str2,'')
        self.assertEqual(O.str1,'')
        O = Operator.Bg()
        self.assertEqual(O.operator,'>')
        self.assertEqual(O.str2,'')
        self.assertEqual(O.str1,'')
        O = Operator.BEq()
        self.assertEqual(O.operator,'>=')
        self.assertEqual(O.str2,'')
        self.assertEqual(O.str1,'')
        O = Operator.Lt()
        self.assertEqual(O.operator,'<')
        self.assertEqual(O.str2,'')
        self.assertEqual(O.str1,'')
        O = Operator.LEq()
        self.assertEqual(O.operator,'<=')
        self.assertEqual(O.str2,'')
        self.assertEqual(O.str1,'')
        O = Operator.bit_And()
        self.assertEqual(O.operator,'&')
        self.assertEqual(O.str2,'')
        self.assertEqual(O.str1,'')
        O = Operator.bit_Or()
        self.assertEqual(O.operator,'|')
        self.assertEqual(O.str2,'')
        self.assertEqual(O.str1,'')
        O = Operator.bit_Not()
        self.assertEqual(O.operator,'~')
        self.assertEqual(O.str2,'')
        self.assertEqual(O.str1,'')
        O = Operator.bit_Xor()
        self.assertEqual(O.operator,'^')
        self.assertEqual(O.str2,'')
        self.assertEqual(O.str1,'')
    def test_OperatorFactory(self):
        f = Operator.ComputeOperatorFacotry()
        self.assertEqual(type(f.setAdd()), type(Operator.Add()))
        self.assertEqual(type(f.setSub()), type(Operator.Sub()))
        self.assertEqual(type(f.setMulti()), type(Operator.Multi()))
        self.assertEqual(type(f.setDivi()), type(Operator.Divi()))
        self.assertEqual(type(f.setRemainder()), type(Operator.Remainder()))
        self.assertEqual(type(f.setDiviOnlyInteger()), type(Operator.DiviOnlyInteger()))
        self.assertEqual(type(f.setPower()), type(Operator.Power()))
        f = Operator.CompareOperatorFacotry()
        self.assertEqual(type(f.setEq()), type(Operator.Eq()))
        self.assertEqual(type(f.setNEq()), type(Operator.NEq()))
        self.assertEqual(type(f.setBg()), type(Operator.Bg()))
        self.assertEqual(type(f.setBEq()), type(Operator.BEq()))
        self.assertEqual(type(f.setLt()), type(Operator.Lt()))
        self.assertEqual(type(f.setLEq()), type(Operator.LEq()))
        f = Operator.BitwiseOperatorFacotry()
        self.assertEqual(type(f.setAnd()), type(Operator.bit_And()))
        self.assertEqual(type(f.setOr()), type(Operator.bit_Or()))
        self.assertEqual(type(f.setNot()), type(Operator.bit_Not()))
        self.assertEqual(type(f.setXor()), type(Operator.bit_Xor()))



if __name__ == '__main__':
    unittest.main()

